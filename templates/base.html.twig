<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>{% block title %}Welcome!{% endblock %}</title>
        <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text></svg>">
        {# Run `composer require symfony/webpack-encore-bundle` to start using Symfony UX #}
        {% block stylesheets %}
            {{ encore_entry_link_tags('app') }}
        {% endblock %}

        {% block javascripts %}
            {{ encore_entry_script_tags('app') }}
        {% endblock %}
    </head>
    <body>
        {% block body %}{% endblock %}
    </body>
</html>





{# 


<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visualisation de la dynamique audio</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background-color: #282c34;
            color: white;
            font-family: Arial, sans-serif;
        }
        canvas {
            border: 1px solid white;
        }
        #progress-container {
            width: 800px;
            height: 20px;
            background-color: #444;
            margin: 20px 0;
            border-radius: 10px;
            overflow: hidden;
            position: relative;
            cursor: pointer;
            display: flex;
        }
        #progress-bar {
            width: 0;
            height: 100%;
            background-color: #76c7c0;
            position: absolute;
            top: 0;
            left: 0;
        }
        .progress-segment {
            flex: 1;
            border-left: 1px solid #555;
        }
        .progress-segment:first-child {
            border-left: none;
        }
    </style>
</head>
<body>
    <input type="file" id="audioFile" accept="audio/*">
    <div id="progress-container">
        <div id="progress-bar"></div>
        <!-- Ajout des segments de progression -->
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
        <div class="progress-segment"></div>
    </div>
    <canvas id="visualizer" width="800" height="400"></canvas>

    <script>
        /**
         * Ce code a été développé par Gansa Diambote Eric pour la CPAM.
         */

        const fileInput = document.getElementById('audioFile');
        const canvas = document.getElementById('visualizer');
        const ctx = canvas.getContext('2d');
        const progressBar = document.getElementById('progress-bar');
        const progressContainer = document.getElementById('progress-container');

        let audioContext;
        let source;
        let analyser;
        let buffer;
        let startTime;

        const updateProgress = () => {
            const elapsedTime = audioContext.currentTime - startTime;
            const progress = (elapsedTime / buffer.duration) * 100;
            progressBar.style.width = `${progress}%`;

            if (progress < 100) {
                requestAnimationFrame(updateProgress);
            }
        };

        fileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const reader = new FileReader();
                reader.onload = (e) => {
                    audioContext.decodeAudioData(e.target.result, (decodedBuffer) => {
                        buffer = decodedBuffer;
                        visualiser(audioContext, buffer);
                        initializeProgress();
                    });
                };
                reader.readAsArrayBuffer(file);
            }
        });

        function visualiser(audioContext, buffer) {
            if (source) {
                source.stop();
            }
            source = audioContext.createBufferSource();
            source.buffer = buffer;
            analyser = audioContext.createAnalyser();
            source.connect(analyser);
            analyser.connect(audioContext.destination);
            analyser.fftSize = 2048;

            const bufferLength = analyser.frequencyBinCount;
            const dataArray = new Uint8Array(bufferLength);

            source.start();
            startTime = audioContext.currentTime;

            function dessiner() {
                requestAnimationFrame(dessiner);
                analyser.getByteTimeDomainData(dataArray);

                ctx.fillStyle = 'rgb(40, 44, 52)';
                ctx.fillRect(0, 0, canvas.width, canvas.height);

                ctx.lineWidth = 2;
                ctx.strokeStyle = 'rgb(255, 255, 255)';

                ctx.beginPath();
                const sliceWidth = canvas.width * 1.0 / bufferLength;
                let x = 0;

                for (let i = 0; i < bufferLength; i++) {
                    const v = dataArray[i] / 128.0;
                    const y = v * canvas.height / 2;

                    if (i === 0) {
                        ctx.moveTo(x, y);
                    } else {
                        ctx.lineTo(x, y);
                    }

                    x += sliceWidth;
                }

                ctx.lineTo(canvas.width, canvas.height / 2);
                ctx.stroke();

                updateProgress();
            }

            dessiner();
        }

        function initializeProgress() {
            progressBar.style.width = '0%';
            progressContainer.addEventListener('click', (e) => {
                const rect = progressContainer.getBoundingClientRect();
                const offsetX = e.clientX - rect.left;
                const newTime = (offsetX / progressContainer.clientWidth) * buffer.duration;
                source.stop();
                startTime = audioContext.currentTime - newTime;
                source = audioContext.createBufferSource();
                source.buffer = buffer;
                source.connect(analyser);
                analyser.connect(audioContext.destination);
                source.start(0, newTime);
                updateProgress();
            });
        }
    </script>
</body>
</html> #}